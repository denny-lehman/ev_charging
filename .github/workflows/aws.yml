# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Uploads docker container of application to ECR repo
#

# 2. SSH's into EC2 instance to call docker containers from ECR 
#


name: Deploy to Amazon ECR and SSH into EC2 Instance for Deployment

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1              # set this to your preferred AWS region, e.g. us-west-1
  ECR_REGISTRY: 241112547949.dkr.ecr.us-east-1.amazonaws.com

permissions:
  contents: read
  id-token: write


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Delete unnecessary tools folder
      run: rm -rf /opt/hostedtoolcache
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::241112547949:role/githubaction-ecr
        audience: sts.amazonaws.com
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        SSH_PRIVATE_KEY: ${{ secrets.CHARGEBUDDY_ACTIONRUNNER }}
        ECR_REPOSITORY: "charge-buddy"
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
        

    - name: SSH Key Creation 
      env:
        SSH_PRIVATE_KEY: ${{ secrets.CHARGEBUDDY_ACTIONRUNNER }}
      run: |
        echo "$SSH_PRIVATE_KEY" > ssh_private_key && chmod 600 ssh_private_key
        ssh -oStrictHostKeyChecking=no -i ssh_private_key ubuntu@34.231.106.254


    - name: Deploy
      env:
        SSH_PRIVATE_KEY: ${{ secrets.CHARGEBUDDY_ACTIONRUNNER }}
        IMAGE: ${{ env.IMAGE }}
      run: |
        ssh -oStrictHostKeyChecking=no -i ssh_private_key ubuntu@34.231.106.254 'bash -c "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 241112547949.dkr.ecr.us-east-1.amazonaws.com "'
        scp -oStrictHostKeyChecking=no -i  ssh_private_key -r nginx ubuntu@34.231.106.254:~
        ssh -oStrictHostKeyChecking=no -i ssh_private_key 'bash -c echo "$IMAGE"'
        cat docker-compose.yml | ssh -oStrictHostKeyChecking=no -i ssh_private_key ubuntu@34.231.106.254 'bash -c "cat > docker-compose.yml "'
        ssh -oStrictHostKeyChecking=no -i ssh_private_key ubuntu@34.231.106.254 'bash -c "docker-compose up "'
  
